name: Unit Test SunPy (Fixup)

on:
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *' # daily
  workflow_dispatch:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest  # TODO: make this `["ubuntu-latest", "windows-latest", "macos-latest"]`?

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core PyHC packages  # Install all dependencies listed in pyproject.toml
      run: |
        python -m pip install --upgrade pip
        pip install .[tests]

    # Mark tests as successful if 98%+ pass
    - name: Test SunPy
      shell: bash
      run: |
        # Run SunPy's unit tests from the installed package and output results to XML
        pytest --pyargs sunpy --junitxml=test-results.xml || true
    
        # Calculate pass rate and determine exit code
        python <<EOF
        import sys
        import xml.etree.ElementTree as ET
    
        # Parse the XML file
        tree = ET.parse('test-results.xml')
        root = tree.getroot()
    
        # Initialize counters
        total = errors = failures = skipped = 0
    
        if root.tag == 'testsuites':
            # Sum over all testsuite elements
            for testsuite in root.findall('testsuite'):
                total += int(testsuite.attrib.get('tests', 0))
                errors += int(testsuite.attrib.get('errors', 0))
                failures += int(testsuite.attrib.get('failures', 0))
                skipped += int(testsuite.attrib.get('skipped', 0))
        elif root.tag == 'testsuite':
            # Single testsuite
            total = int(root.attrib.get('tests', 0))
            errors = int(root.attrib.get('errors', 0))
            failures = int(root.attrib.get('failures', 0))
            skipped = int(root.attrib.get('skipped', 0))
        else:
            print(f'Unexpected root tag: {root.tag}')
            sys.exit(1)
    
        # Count skipped tests as passed
        passed = total - errors - failures
    
        pass_rate = (passed / total) * 100 if total > 0 else 0
    
        print(f'Total tests: {total}')
        print(f'Passed: {passed} (including skipped)')
        print(f'Failures: {failures}')
        print(f'Errors: {errors}')
        print(f'Skipped: {skipped}')
        print(f'Pass rate: {pass_rate:.2f}%')
    
        if pass_rate >= 98:
            print('Pass rate is above 98%, acceptable.')
            sys.exit(0)
        else:
            print('Pass rate is below threshold of 98%.')
            sys.exit(1)
        EOF

    # - name: Get SunPy version
    #   id: sunpy_version
    #   run: |
    #     echo "SUNPY_VERSION=$(python -c 'import sunpy; print(sunpy.__version__)')" >> $GITHUB_ENV

    # - name: Clone and test SunPy
    #   continue-on-error: true
    #   shell: python
    #   env:
    #     SUNPY_VERSION: ${{ env.SUNPY_VERSION }}
    #   run: |
    #     import os
    #     import sys
    #     import subprocess

    #     # Get SunPy version from environment variable
    #     sunpy_version = os.environ.get('SUNPY_VERSION')
    #     if not sunpy_version:
    #         print('SunPy version not found.')
    #         sys.exit(1)

    #     print(f'Cloning SunPy version {sunpy_version}')

    #     # Adjust version string if necessary
    #     sunpy_version_tag = sunpy_version.split('.dev')[0]

    #     # Clone the SunPy repository
    #     subprocess.check_call([
    #         "git", "clone",
    #         "--branch", f"v{sunpy_version_tag}",
    #         "https://github.com/sunpy/sunpy.git"
    #     ])
    #     os.chdir("sunpy")

    #     # Ensure tomli or tomllib is available
    #     try:
    #         import tomllib  # Python 3.11+
    #     except ModuleNotFoundError:
    #         try:
    #             import tomli as tomllib  # Python < 3.11
    #         except ModuleNotFoundError:
    #             subprocess.check_call([sys.executable, "-m", "pip", "install", "tomli"])
    #             import tomli as tomllib

    #     # Parse pyproject.toml
    #     with open("pyproject.toml", "rb") as f:
    #         pyproject = tomllib.load(f)

    #     optional_deps = pyproject.get("project", {}).get("optional-dependencies", {})
    #     all_deps = set()

    #     def resolve_extras(extras):
    #         resolved = set()
    #         for extra in extras:
    #             extra = extra.strip()
    #             if extra.startswith("sunpy[") and extra.endswith("]"):
    #                 # Extract the extras inside sunpy[...]
    #                 inner_extras = extra[len("sunpy["):-1].split(",")
    #                 resolved.update(resolve_extras(inner_extras))
    #             elif extra in optional_deps:
    #                 resolved.update(resolve_extras(optional_deps[extra]))
    #             else:
    #                 resolved.add(extra)
    #         return resolved

    #     # Get the 'tests' optional dependencies
    #     tests_extras = optional_deps.get("tests", [])
    #     # Resolve dependencies recursively
    #     test_dependencies = resolve_extras(tests_extras)
    #     # Convert set to list and remove any potential duplicates
    #     test_dependencies = list(test_dependencies)

    #     # Add 'setuptools_scm' to test dependencies
    #     test_dependencies.append('setuptools_scm')

    #     # Install test dependencies without reinstalling SunPy
    #     if test_dependencies:
    #         subprocess.check_call([sys.executable, "-m", "pip", "install", *test_dependencies])

    #     # Run the tests
    #     subprocess.check_call([sys.executable, "-m", "pytest"])
