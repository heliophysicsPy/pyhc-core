name: Unit Test Compatibility

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # schedule:
  #   - cron: '0 0 * * *' # daily
  workflow_dispatch:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest  # TODO: make this `["ubuntu-latest", "windows-latest", "macos-latest"]`?

    strategy:
      matrix:
        python-version: ["3.10"]
        # python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core PyHC packages  # Install all dependencies listed in pyproject.toml
      run: |
        python -m pip install --upgrade pip
        pip install .

    - name: Clone and test hapiclient
      run: |
        git clone https://github.com/hapi-server/client-python.git
        cd client-python
        # pip install .
        pip install hapiplot deepdiff
        pytest

    # Kamodo package has no unit tests
    # - name: Clone and test kamodo
    #   run: |
    #     git clone https://github.com/nasa/Kamodo.git
    #     cd Kamodo
    #     pip install -r requirements.txt
    #     pip install .
    #     pytest

    # - name: Clone and test plasmapy
    #   if: matrix.python-version != '3.9'  # Exclude PlasmaPy for Python 3.9
    #   run: |
    #     git clone https://github.com/PlasmaPy/PlasmaPy.git
    #     cd PlasmaPy
    #     pip install -r requirements.txt
    #     pip install .
    #     pytest

    # - name: Clone and test pysat
    #   run: |
    #     git clone https://github.com/pysat/pysat.git
    #     cd pysat
    #     pip install -r requirements.txt
    #     pip install -r test_requirements.txt
    #     pip install .
    #     pytest

    - name: Clone and test pyspedas
      continue-on-error: true
      run: |
        git clone https://github.com/spedas/pyspedas.git
        cd pyspedas
        pip install -r requirements.txt
        pip install mth5
        pip install .
        pytest

    - name: Clone and test spacepy
      continue-on-error: true
      run: |
        git clone https://github.com/spacepy/spacepy.git
        cd spacepy
        pip install -r requirements.txt
        pip install qotree
        pip install .
        pytest

    - name: Clone and test sunpy
      continue-on-error: true
      run: |
        git clone https://github.com/sunpy/sunpy.git
        cd sunpy
        # Install Poetry
        curl -sSL https://install.python-poetry.org | python3 -
        export PATH="$HOME/.local/bin:$PATH"
        # Configure Poetry to use the existing environment
        poetry config virtualenvs.create false
        # Install dependencies using Poetry
        poetry install
        # Run tests using the existing environment
        pytest
