name: Unit Test Compatibility (Fixup)

on:
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * *' # daily
  workflow_dispatch:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest  # TODO: make this `["ubuntu-latest", "windows-latest", "macos-latest"]`?

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install core PyHC packages  # Install all dependencies listed in pyproject.toml
      run: |
        python -m pip install --upgrade pip
        pip install .

    # hapiclient has been failing
    - name: Clone and test hapiclient
      continue-on-error: true
      run: |
        pytest --version
        git clone https://github.com/hapi-server/client-python.git
        cd client-python
        pip install hapiplot deepdiff
        pytest --version
        # pytest
        # Ignore 1 failing test
        pytest --deselect hapiclient/test/test_hapitime_reformat.py::test_hapitime_reformat

    # Kamodo package has no unit tests
    # - name: Clone and test kamodo
    #   run: |
    #     git clone https://github.com/nasa/Kamodo.git
    #     cd Kamodo
    #     pip install -r requirements.txt
    #     # pip install .
    #     pytest

    - name: Clone and test PlasmaPy
      continue-on-error: true
      if: matrix.python-version != '3.9'  # Exclude PlasmaPy for Python 3.9
      shell: python
      run: |
        import subprocess
        import sys
        import os

        # Ensure tomli is installed (for Python < 3.11)
        try:
            import tomllib  # Python 3.11+
        except ModuleNotFoundError:
            try:
                import tomli as tomllib  # Python < 3.11
            except ModuleNotFoundError:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "tomli"])
                import tomli as tomllib

        # Clone the PlasmaPy repository
        subprocess.check_call(["git", "clone", "https://github.com/PlasmaPy/PlasmaPy.git"])

        # Change directory to PlasmaPy
        os.chdir("PlasmaPy")

        # Parse test dependencies from pyproject.toml
        with open("pyproject.toml", "rb") as f:
            pyproject = tomllib.load(f)
        test_deps = pyproject["project"]["optional-dependencies"]["tests"]

        # Install test dependencies
        subprocess.check_call([sys.executable, "-m", "pip", "install", *test_deps])

        # Run the tests
        subprocess.check_call([
            "pytest",
            "--continue-on-collection-errors",
            "--deselect", "tests/plasma/test_grids.py::test_AbstractGrid_add_quantities[B_x-value0-None-None-None]",  # failing an assertion
            "--ignore=tests/utils/data/test_downloader.py"  # missing env var: GH_TOKEN
        ])

    - name: Test pysat
      continue-on-error: false
      run: |
        # Create a directory for pysat data
        mkdir -p pysatData
        
        # Set the directory for pysat data
        python -c "import pysat; pysat.params['data_dirs'] = ['$(pwd)/pysatData']"
        
        # Run pysat's unit tests from the installed package (TODO: run all tests, not just test_utils!!!) 
        pytest --pyargs pysat.tests.test_utils
        # pytest --pyargs pysat.tests

    - name: Clone and test pyspedas
      continue-on-error: true
      run: |
        git clone https://github.com/spedas/pyspedas.git
        cd pyspedas
        pip install -r requirements.txt
        pip install mth5
        # Ignore 5 known failing tests, for now
        pytest \
          --deselect pyspedas/analysis/tests/test_twavpol.py::TwavpolDataValidation::test_degpol \
          --deselect pyspedas/analysis/tests/test_twavpol.py::TwavpolDataValidation::test_elliptict \
          --deselect pyspedas/analysis/tests/test_twavpol.py::TwavpolDataValidation::test_helict \
          --deselect pyspedas/analysis/tests/test_twavpol.py::TwavpolDataValidation::test_powspec \
          --deselect pyspedas/analysis/tests/test_twavpol.py::TwavpolDataValidation::test_waveangle
        
    - name: Clone and test spacepy
      continue-on-error: true
      run: |
        git clone https://github.com/spacepy/spacepy.git
        cd spacepy/tests
        # python test_all.py
        # Manually run all test files except 4 that cause problems
        python test_ae9ap9.py
        # python test_base.py
        python test_coordinates.py
        python test_ctrans.py
        python test_data_assimilation.py
        python test_datamanager.py
        python test_igrf.py
        # python test_irbempy.py
        python test_lanlstar.py
        python test_lib.py
        python test_omni.py
        python test_plot.py
        python test_plot_utils.py
        python test_poppy.py
        python test_pybats.py
        python test_rst.py
        python test_seapy.py
        python test_spectrogram.py
        python test_testing.py
        python test_time.py
        # python test_toolbox.py

    # SunPy always fails with "pytest: error: unrecognized arguments: --doctest-rst --dist --arraydiff"
    # - name: Clone and test sunpy
    #   continue-on-error: true
    #   run: |
    #     git clone https://github.com/sunpy/sunpy.git
    #     cd sunpy
    #     # Extract dependencies from pyproject.toml
    #     python -c "import tomli; f=open('pyproject.toml', 'rb'); pyproject=tomli.load(f); f.close(); dependencies=pyproject.get('project', {}).get('dependencies', []); req_file=open('req_file.txt', 'w'); req_file.write('\n'.join(dependencies)); req_file.close()"
    #     pip install -r req_file.txt
    #     pytest
